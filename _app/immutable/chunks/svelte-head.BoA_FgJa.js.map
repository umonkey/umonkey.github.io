{"version":3,"file":"svelte-head.BoA_FgJa.js","sources":["../../../../../../node_modules/svelte/src/internal/client/dom/blocks/svelte-head.js"],"sourcesContent":["/** @import { TemplateNode } from '#client' */\nimport { hydrate_node, hydrating, set_hydrate_node, set_hydrating } from '../hydration.js';\nimport { create_text, get_first_child, get_next_sibling } from '../operations.js';\nimport { block } from '../../reactivity/effects.js';\nimport { HEAD_EFFECT } from '../../constants.js';\nimport { HYDRATION_START } from '../../../../constants.js';\n\n/**\n * @type {Node | undefined}\n */\nlet head_anchor;\n\nexport function reset_head_anchor() {\n\thead_anchor = undefined;\n}\n\n/**\n * @param {(anchor: Node) => void} render_fn\n * @returns {void}\n */\nexport function head(render_fn) {\n\t// The head function may be called after the first hydration pass and ssr comment nodes may still be present,\n\t// therefore we need to skip that when we detect that we're not in hydration mode.\n\tlet previous_hydrate_node = null;\n\tlet was_hydrating = hydrating;\n\n\t/** @type {Comment | Text} */\n\tvar anchor;\n\n\tif (hydrating) {\n\t\tprevious_hydrate_node = hydrate_node;\n\n\t\t// There might be multiple head blocks in our app, so we need to account for each one needing independent hydration.\n\t\tif (head_anchor === undefined) {\n\t\t\thead_anchor = /** @type {TemplateNode} */ (get_first_child(document.head));\n\t\t}\n\n\t\twhile (\n\t\t\thead_anchor !== null &&\n\t\t\t(head_anchor.nodeType !== 8 || /** @type {Comment} */ (head_anchor).data !== HYDRATION_START)\n\t\t) {\n\t\t\thead_anchor = /** @type {TemplateNode} */ (get_next_sibling(head_anchor));\n\t\t}\n\n\t\t// If we can't find an opening hydration marker, skip hydration (this can happen\n\t\t// if a framework rendered body but not head content)\n\t\tif (head_anchor === null) {\n\t\t\tset_hydrating(false);\n\t\t} else {\n\t\t\thead_anchor = set_hydrate_node(/** @type {TemplateNode} */ (get_next_sibling(head_anchor)));\n\t\t}\n\t}\n\n\tif (!hydrating) {\n\t\tanchor = document.head.appendChild(create_text());\n\t}\n\n\ttry {\n\t\tblock(() => render_fn(anchor), HEAD_EFFECT);\n\t} finally {\n\t\tif (was_hydrating) {\n\t\t\tset_hydrating(true);\n\t\t\thead_anchor = hydrate_node; // so that next head block starts from the correct node\n\t\t\tset_hydrate_node(/** @type {TemplateNode} */ (previous_hydrate_node));\n\t\t}\n\t}\n}\n"],"names":["head_anchor","reset_head_anchor","head","render_fn","previous_hydrate_node","was_hydrating","hydrating","anchor","hydrate_node","get_first_child","HYDRATION_START","get_next_sibling","set_hydrating","set_hydrate_node","create_text","block","HEAD_EFFECT"],"mappings":"gaAUA,IAAIA,EAEG,SAASC,GAAoB,CACnCD,EAAc,MACf,CAMO,SAASE,EAAKC,EAAW,CAG/B,IAAIC,EAAwB,KACxBC,EAAgBC,EAGpB,IAAIC,EAEJ,GAAID,EAAW,CAQd,IAPAF,EAAwBI,EAGpBR,IAAgB,SACnBA,EAA2CS,EAAgB,SAAS,IAAI,GAIxET,IAAgB,OACfA,EAAY,WAAa,GAA6BA,EAAa,OAASU,IAE7EV,EAA2CW,EAAiBX,CAAW,EAKpEA,IAAgB,KACnBY,EAAc,EAAK,EAEnBZ,EAAca,EAA8CF,EAAiBX,CAAW,CAAG,CAE9F,CAEMM,IACJC,EAAS,SAAS,KAAK,YAAYO,EAAW,CAAE,GAGjD,GAAI,CACHC,EAAM,IAAMZ,EAAUI,CAAM,EAAGS,CAAW,CAC5C,QAAW,CACLX,IACHO,EAAc,EAAI,EAClBZ,EAAcQ,EACdK,EAA8CT,CAAuB,EAExE,CACA","x_google_ignoreList":[0]}