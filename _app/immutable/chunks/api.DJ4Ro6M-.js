var p=Object.defineProperty;var y=(e,t,s)=>t in e?p(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var u=(e,t,s)=>y(e,typeof t!="symbol"?t+"":t,s);import{a as h,s as l,S as g,b as f,h as T,o as w}from"./trace.BqOobQqQ.js";import{c as m}from"./exports.BzxnYsNq.js";import{i as b,a as S}from"./auth.DiIQwFfa.js";import{d as v,w as E,g as c}from"./index.BTzXIiXz.js";import"./disclose-version.BAs0i9JR.js";import{b as q}from"./env.Dd9ynE6Q.js";(function(){try{var e=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},t=new e.Error().stack;t&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[t]="2c4a672c-6191-421a-b3a8-e39c88aa0ee6",e._sentryDebugIdIdentifier="sentry-dbid-2c4a672c-6191-421a-b3a8-e39c88aa0ee6")}catch{}})();function G(e){if(e==null||typeof e!="object")return!1;const t="location"in e&&typeof e.location=="string",s="status"in e&&typeof e.status=="number"&&e.status>=300&&e.status<=308;return t&&s}function _(e){return typeof e=="object"&&e!==null&&"status"in e&&"body"in e}function C(e){const t=w(e);return G(t)||_(t)&&t.status<500&&t.status>=400||m(t,{mechanism:{type:"sveltekit",handled:!1,data:{function:"load"}}}),t}function k(e){return new Proxy(e,{apply:(t,s,n)=>{const a=n[0];if(a.__sentry_wrapped__)return t.apply(s,n);const r={...a};h(r,"__sentry_wrapped__",!0);const i=a.route&&Object.getOwnPropertyDescriptor(a.route,"id"),o=i&&i.value||a.route.id;return l({op:"function.sveltekit.load",attributes:{[g]:"auto.function.sveltekit",[f]:o?"route":"url"},name:o||a.url.pathname},()=>T(()=>t.apply(s,[r]),C))}})}const d=E({}),H=v(d,e=>t=>e[t]??void 0),I=e=>{d.update(t=>{for(const s of e)t[s.id]=s;return t})};class O{constructor(){u(this,"root");this.root=q,console.debug(`[api] Root: ${this.root}`)}async getTree(t){console.debug(`[api] Getting tree ${t}`);const s=await this.request("GET",`v1/trees/${t}`);return s.status===200&&I(s.data.users),s}async getTreeDefaults(){return console.debug("[api] Getting tree defaults"),await this.request("GET","v1/trees/defaults")}async getStats(){return await this.request("GET","v1/trees/stats")}async getSpeciesStats(){return await this.request("GET","v1/stats/species")}async getSpeciesMismatch(){return await this.request("GET","v1/stats/species/mismatch")}async getTopHeight(){return await this.request("GET","v1/stats/height")}async getTopDiameter(){return await this.request("GET","v1/stats/diameter")}async getTopCircumference(){return await this.request("GET","v1/stats/circumference")}async getTopStreets(){return await this.request("GET","v1/stats/streets")}async getMe(t){return await this.request("GET","v1/me",{headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`}})}async getMarkers(t,s,n,a,r){const i=new URLSearchParams({n:t.toString(),e:s.toString(),s:n.toString(),w:a.toString()});return r&&i.set("search",r),await this.request("GET","v1/trees?"+i.toString())}async addTree(t){return await this.request("POST","v1/trees",{body:JSON.stringify(t),headers:{"Content-Type":"application/json",...this.getAuthHeaders()}})}async loginWithGoogle(t){return console.debug("[api] Logging in with Google"),await this.request("POST","v2/login/google",{body:JSON.stringify({token:t}),headers:{"Content-Type":"application/json"}})}async updateTree(t,s){return await this.request("PUT",`v1/trees/${t}`,{body:JSON.stringify(s),headers:{"Content-Type":"application/json",...this.getAuthHeaders()}})}async addComment(t,s){const n={"Content-Type":"application/json",...this.getAuthHeaders()};return await this.request("POST",`v1/trees/${t}/comments`,{body:JSON.stringify({message:s}),headers:n})}async uploadFile(t,s){const n={"Content-Type":"application/json",...this.getAuthHeaders()},a=await s.arrayBuffer(),r=new Blob([a],{type:s.type});return await this.request("POST",`v1/trees/${t}/files`,{body:r,headers:n})}async searchSpecies(t){const s=new URLSearchParams({query:t});return await this.request("GET",`v1/species/search?${s}`)}async getTreeComments(t){return await this.request("GET",`v1/trees/${t}/comments`)}async getRecentComments(){return await this.request("GET","v1/comments")}async getNewTrees(){return await this.request("GET","v1/trees/new")}async getUpdatedTrees(){return await this.request("GET","v1/trees/updated")}async request(t,s,n){console.debug(`[api] Requesting ${t} ${this.root}${s}`);const a=new Request(this.root+s,{method:t,...n}),r=await fetch(a),i=r.status==202?void 0:await r.json();return{status:r.status,data:i}}getAuthHeaders(){var t;if(c(b)){const s=(t=c(S))==null?void 0:t.token;if(s)return{Authorization:`Bearer ${s}`}}return{}}}const B=new O;export{B as a,I as b,H as g,k as w};
