{"version":3,"file":"Button.DsjyUK2M.js","sources":["../../../../../../node_modules/svelte/src/internal/client/dom/elements/bindings/input.js","../../../../../../src/lib/components/forms/TextInput.svelte","../../../../../../src/lib/components/forms/Button.svelte"],"sourcesContent":["import { DEV } from 'esm-env';\nimport { render_effect, teardown } from '../../../reactivity/effects.js';\nimport { listen_to_event_and_reset_event } from './shared.js';\nimport * as e from '../../../errors.js';\nimport { is } from '../../../proxy.js';\nimport { queue_micro_task } from '../../task.js';\nimport { hydrating } from '../../hydration.js';\nimport { is_runes, untrack } from '../../../runtime.js';\n\n/**\n * @param {HTMLInputElement} input\n * @param {() => unknown} get\n * @param {(value: unknown) => void} set\n * @returns {void}\n */\nexport function bind_value(input, get, set = get) {\n\tvar runes = is_runes();\n\n\tlisten_to_event_and_reset_event(input, 'input', (is_reset) => {\n\t\tif (DEV && input.type === 'checkbox') {\n\t\t\t// TODO should this happen in prod too?\n\t\t\te.bind_invalid_checkbox_value();\n\t\t}\n\n\t\t/** @type {any} */\n\t\tvar value = is_reset ? input.defaultValue : input.value;\n\t\tvalue = is_numberlike_input(input) ? to_number(value) : value;\n\t\tset(value);\n\n\t\t// In runes mode, respect any validation in accessors (doesn't apply in legacy mode,\n\t\t// because we use mutable state which ensures the render effect always runs)\n\t\tif (runes && value !== (value = get())) {\n\t\t\tvar start = input.selectionStart;\n\t\t\tvar end = input.selectionEnd;\n\n\t\t\t// the value is coerced on assignment\n\t\t\tinput.value = value ?? '';\n\n\t\t\t// Restore selection\n\t\t\tif (end !== null) {\n\t\t\t\tinput.selectionStart = start;\n\t\t\t\tinput.selectionEnd = Math.min(end, input.value.length);\n\t\t\t}\n\t\t}\n\t});\n\n\tif (\n\t\t// If we are hydrating and the value has since changed,\n\t\t// then use the updated value from the input instead.\n\t\t(hydrating && input.defaultValue !== input.value) ||\n\t\t// If defaultValue is set, then value == defaultValue\n\t\t// TODO Svelte 6: remove input.value check and set to empty string?\n\t\t(untrack(get) == null && input.value)\n\t) {\n\t\tset(is_numberlike_input(input) ? to_number(input.value) : input.value);\n\t}\n\n\trender_effect(() => {\n\t\tif (DEV && input.type === 'checkbox') {\n\t\t\t// TODO should this happen in prod too?\n\t\t\te.bind_invalid_checkbox_value();\n\t\t}\n\n\t\tvar value = get();\n\n\t\tif (is_numberlike_input(input) && value === to_number(input.value)) {\n\t\t\t// handles 0 vs 00 case (see https://github.com/sveltejs/svelte/issues/9959)\n\t\t\treturn;\n\t\t}\n\n\t\tif (input.type === 'date' && !value && !input.value) {\n\t\t\t// Handles the case where a temporarily invalid date is set (while typing, for example with a leading 0 for the day)\n\t\t\t// and prevents this state from clearing the other parts of the date input (see https://github.com/sveltejs/svelte/issues/7897)\n\t\t\treturn;\n\t\t}\n\n\t\t// don't set the value of the input if it's the same to allow\n\t\t// minlength to work properly\n\t\tif (value !== input.value) {\n\t\t\t// @ts-expect-error the value is coerced on assignment\n\t\t\tinput.value = value ?? '';\n\t\t}\n\t});\n}\n\n/** @type {Set<HTMLInputElement[]>} */\nconst pending = new Set();\n\n/**\n * @param {HTMLInputElement[]} inputs\n * @param {null | [number]} group_index\n * @param {HTMLInputElement} input\n * @param {() => unknown} get\n * @param {(value: unknown) => void} set\n * @returns {void}\n */\nexport function bind_group(inputs, group_index, input, get, set = get) {\n\tvar is_checkbox = input.getAttribute('type') === 'checkbox';\n\tvar binding_group = inputs;\n\n\t// needs to be let or related code isn't treeshaken out if it's always false\n\tlet hydration_mismatch = false;\n\n\tif (group_index !== null) {\n\t\tfor (var index of group_index) {\n\t\t\t// @ts-expect-error\n\t\t\tbinding_group = binding_group[index] ??= [];\n\t\t}\n\t}\n\n\tbinding_group.push(input);\n\n\tlisten_to_event_and_reset_event(\n\t\tinput,\n\t\t'change',\n\t\t() => {\n\t\t\t// @ts-ignore\n\t\t\tvar value = input.__value;\n\n\t\t\tif (is_checkbox) {\n\t\t\t\tvalue = get_binding_group_value(binding_group, value, input.checked);\n\t\t\t}\n\n\t\t\tset(value);\n\t\t},\n\t\t// TODO better default value handling\n\t\t() => set(is_checkbox ? [] : null)\n\t);\n\n\trender_effect(() => {\n\t\tvar value = get();\n\n\t\t// If we are hydrating and the value has since changed, then use the update value\n\t\t// from the input instead.\n\t\tif (hydrating && input.defaultChecked !== input.checked) {\n\t\t\thydration_mismatch = true;\n\t\t\treturn;\n\t\t}\n\n\t\tif (is_checkbox) {\n\t\t\tvalue = value || [];\n\t\t\t// @ts-ignore\n\t\t\tinput.checked = value.includes(input.__value);\n\t\t} else {\n\t\t\t// @ts-ignore\n\t\t\tinput.checked = is(input.__value, value);\n\t\t}\n\t});\n\n\tteardown(() => {\n\t\tvar index = binding_group.indexOf(input);\n\n\t\tif (index !== -1) {\n\t\t\tbinding_group.splice(index, 1);\n\t\t}\n\t});\n\n\tif (!pending.has(binding_group)) {\n\t\tpending.add(binding_group);\n\n\t\tqueue_micro_task(() => {\n\t\t\t// necessary to maintain binding group order in all insertion scenarios\n\t\t\tbinding_group.sort((a, b) => (a.compareDocumentPosition(b) === 4 ? -1 : 1));\n\t\t\tpending.delete(binding_group);\n\t\t});\n\t}\n\n\tqueue_micro_task(() => {\n\t\tif (hydration_mismatch) {\n\t\t\tvar value;\n\n\t\t\tif (is_checkbox) {\n\t\t\t\tvalue = get_binding_group_value(binding_group, value, input.checked);\n\t\t\t} else {\n\t\t\t\tvar hydration_input = binding_group.find((input) => input.checked);\n\t\t\t\t// @ts-ignore\n\t\t\t\tvalue = hydration_input?.__value;\n\t\t\t}\n\n\t\t\tset(value);\n\t\t}\n\t});\n}\n\n/**\n * @param {HTMLInputElement} input\n * @param {() => unknown} get\n * @param {(value: unknown) => void} set\n * @returns {void}\n */\nexport function bind_checked(input, get, set = get) {\n\tlisten_to_event_and_reset_event(input, 'change', (is_reset) => {\n\t\tvar value = is_reset ? input.defaultChecked : input.checked;\n\t\tset(value);\n\t});\n\n\tif (\n\t\t// If we are hydrating and the value has since changed,\n\t\t// then use the update value from the input instead.\n\t\t(hydrating && input.defaultChecked !== input.checked) ||\n\t\t// If defaultChecked is set, then checked == defaultChecked\n\t\tuntrack(get) == null\n\t) {\n\t\tset(input.checked);\n\t}\n\n\trender_effect(() => {\n\t\tvar value = get();\n\t\tinput.checked = Boolean(value);\n\t});\n}\n\n/**\n * @template V\n * @param {Array<HTMLInputElement>} group\n * @param {V} __value\n * @param {boolean} checked\n * @returns {V[]}\n */\nfunction get_binding_group_value(group, __value, checked) {\n\tvar value = new Set();\n\n\tfor (var i = 0; i < group.length; i += 1) {\n\t\tif (group[i].checked) {\n\t\t\t// @ts-ignore\n\t\t\tvalue.add(group[i].__value);\n\t\t}\n\t}\n\n\tif (!checked) {\n\t\tvalue.delete(__value);\n\t}\n\n\treturn Array.from(value);\n}\n\n/**\n * @param {HTMLInputElement} input\n */\nfunction is_numberlike_input(input) {\n\tvar type = input.type;\n\treturn type === 'number' || type === 'range';\n}\n\n/**\n * @param {string} value\n */\nfunction to_number(value) {\n\treturn value === '' ? null : +value;\n}\n\n/**\n * @param {HTMLInputElement} input\n * @param {() => FileList | null} get\n * @param {(value: FileList | null) => void} set\n */\nexport function bind_files(input, get, set = get) {\n\tlisten_to_event_and_reset_event(input, 'change', () => {\n\t\tset(input.files);\n\t});\n\n\trender_effect(() => {\n\t\tinput.files = get();\n\t});\n}\n","<script>\n\texport let value = '';\n\texport let placeholder = '';\n\texport let label = '';\n\texport let type = 'text';\n\texport let multiline = false;\n\texport let hint = '';\n</script>\n\n<div class=\"input\">\n\t<label>\n\t\t<span>{label}</span>\n\t\t{#if multiline}\n\t\t\t<textarea bind:value {placeholder}>{value}</textarea>\n\t\t{:else}\n\t\t\t<input {type} bind:value {placeholder} />\n\t\t{/if}\n\t</label>\n\n\t{#if hint}\n\t\t<div class=\"hint\">{hint}</div>\n\t{/if}\n</div>\n\n<style>\n\tlabel {\n\t\tdisplay: block;\n\t\tmargin-top: calc(2 * var(--gap));\n\t}\n\n\tspan {\n\t\tdisplay: block;\n\t\tmargin-bottom: var(--gap);\n\t}\n\n\tinput,\n\ttextarea {\n\t\twidth: 100%;\n\t\tpadding: var(--gap);\n\t\tborder: 1px solid var(--border);\n\t\tborder-radius: var(--radius);\n\t\tbox-sizing: border-box;\n\t\tbackground-color: transparent;\n\t\tborder: 1px solid var(--sep-color);\n\t\tborder-radius: 6px;\n\t\tcolor: var(--form-color);\n\t\toutline: none;\n\t\tline-height: 1.25em;\n\t}\n\n\ttextarea {\n\t\tmin-width: 100%;\n\t\tmax-width: 100%;\n\t\tmin-height: 100px;\n\t}\n\n\t.hint {\n\t\tcolor: var(--text-color-inactive);\n\t\tfont-size: 0.85em;\n\t\tline-height: 125%;\n\t\tmargin-top: var(--gap);\n\t}\n</style>\n","<script>\n\tconst { label, type = 'submit', onClick, disabled = false } = $props();\n</script>\n\n<button type=\"button\" disabled={!!disabled} class={type} onclick={onClick}>{label}</button>\n\n<style>\n\tbutton {\n\t\tbackground-color: var(--form-border);\n\t\tborder: 1px solid var(--form-border);\n\t\tcolor: var(--form-color);\n\t\toutline: none;\n\t\tpadding: 0.5rem 1rem;\n\t\tcursor: pointer;\n\t\tborder-radius: 6px;\n\t}\n\n\tbutton.cancel {\n\t\tbackground-color: transparent;\n\t\tcolor: var(--form-border);\n\t}\n\n\tbutton:disabled {\n\t\topacity: 0.5;\n\t}\n</style>\n"],"names":["bind_value","input","get","set","runes","is_runes","listen_to_event_and_reset_event","is_reset","value","is_numberlike_input","to_number","start","end","hydrating","untrack","render_effect","type","placeholder","label","multiline","hint","$$render","consequent","alternate","consequent_1","disabled"],"mappings":"0vBAeO,SAASA,EAAWC,EAAOC,EAAKC,EAAMD,EAAK,CACjD,IAAIE,EAAQC,EAAU,EAEtBC,EAAgCL,EAAO,QAAUM,GAAa,CAO7D,IAAIC,EAAQD,EAAWN,EAAM,aAAeA,EAAM,MAMlD,GALAO,EAAQC,EAAoBR,CAAK,EAAIS,EAAUF,CAAK,EAAIA,EACxDL,EAAIK,CAAK,EAILJ,GAASI,KAAWA,EAAQN,EAAK,GAAG,CACvC,IAAIS,EAAQV,EAAM,eACdW,EAAMX,EAAM,aAGhBA,EAAM,MAAQO,GAAS,GAGnBI,IAAQ,OACXX,EAAM,eAAiBU,EACvBV,EAAM,aAAe,KAAK,IAAIW,EAAKX,EAAM,MAAM,MAAM,EAEzD,CACA,CAAE,GAKCY,GAAaZ,EAAM,eAAiBA,EAAM,OAG1Ca,EAAQZ,CAAG,GAAK,MAAQD,EAAM,QAE/BE,EAAIM,EAAoBR,CAAK,EAAIS,EAAUT,EAAM,KAAK,EAAIA,EAAM,KAAK,EAGtEc,EAAc,IAAM,CAMnB,IAAIP,EAAQN,EAAK,EAEbO,EAAoBR,CAAK,GAAKO,IAAUE,EAAUT,EAAM,KAAK,GAK7DA,EAAM,OAAS,QAAU,CAACO,GAAS,CAACP,EAAM,OAQ1CO,IAAUP,EAAM,QAEnBA,EAAM,MAAQO,GAAS,GAE1B,CAAE,CACF,CA4JA,SAASC,EAAoBR,EAAO,CACnC,IAAIe,EAAOf,EAAM,KACjB,OAAOe,IAAS,UAAYA,IAAS,OACtC,CAKA,SAASN,EAAUF,EAAO,CACzB,OAAOA,IAAU,GAAK,KAAO,CAACA,CAC/B,+QCxPY,IAAAA,iBAAQ,EAAE,EACVS,sBAAc,EAAE,EAChBC,gBAAQ,EAAE,EACVF,eAAO,MAAM,EACbG,oBAAY,EAAK,EACjBC,eAAO,EAAE,kHAOkBZ,GAAK,+GADrCW,EAAS,EAAAE,EAAAC,CAAA,EAAAD,EAAAE,EAAA,EAAA,oEAQKH,EAAI,CAAA,CAAA,kBADnBA,EAAI,GAAAC,EAAAG,CAAA,mBARDN,EAAK,CAAA,CAAA,sECVE,MAAAF,eAAO,QAAQ,EAAWS,mBAAW,EAAK,wHAGxBA,EAAQ,SAAST,EAAI,GAAA,EAAA,gBAAA","x_google_ignoreList":[0]}