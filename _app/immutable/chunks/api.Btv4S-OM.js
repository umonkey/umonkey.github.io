var p=Object.defineProperty;var l=(e,t,s)=>t in e?p(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var u=(e,t,s)=>l(e,typeof t!="symbol"?t+"":t,s);import{a as y,s as f,S as h,b as g,h as b,o as m}from"./trace.BqOobQqQ.js";import{c as w}from"./exports.Dd3PivI3.js";import{i as T,a as S}from"./auth.DqETVCHJ.js";import{a4 as E,a3 as _,aF as c}from"./index.BzXfXzR0.js";import"./disclose-version.8xToOZts.js";import{b as v}from"./env.sRc8mtKV.js";(function(){try{var e=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},t=new e.Error().stack;t&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[t]="e781e86a-24ca-4060-9b1c-d57628017523",e._sentryDebugIdIdentifier="sentry-dbid-e781e86a-24ca-4060-9b1c-d57628017523")}catch{}})();function I(e){if(e==null||typeof e!="object")return!1;const t="location"in e&&typeof e.location=="string",s="status"in e&&typeof e.status=="number"&&e.status>=300&&e.status<=308;return t&&s}function q(e){return typeof e=="object"&&e!==null&&"status"in e&&"body"in e}function C(e){const t=m(e);return I(t)||q(t)&&t.status<500&&t.status>=400||w(t,{mechanism:{type:"sveltekit",handled:!1,data:{function:"load"}}}),t}function U(e){return new Proxy(e,{apply:(t,s,r)=>{const n=r[0];if(n.__sentry_wrapped__)return t.apply(s,r);const a={...n};y(a,"__sentry_wrapped__",!0);const o=n.route&&Object.getOwnPropertyDescriptor(n.route,"id"),i=o&&o.value||n.route.id;return f({op:"function.sveltekit.load",attributes:{[h]:"auto.function.sveltekit",[g]:i?"route":"url"},name:i||n.url.pathname},()=>b(()=>t.apply(s,[a]),C))}})}const d=_({}),B=E(d,e=>t=>e[t]??void 0),R=e=>{d.update(t=>{for(const s of e)t[s.id]=s;return t})};class ${constructor(){u(this,"root");this.root=v,console.debug(`[api] Root: ${this.root}`)}async getTree(t){console.debug(`[api] Getting tree ${t}`);const s=await this.request("GET",`v1/trees/${t}`);return s.status===200&&R(s.data.users),s}async getStats(){return console.debug("[api] Getting stats"),await this.request("GET","v1/trees/stats")}async getMe(t){return await this.request("GET","v1/me",{headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`}})}async getMarkers(t,s,r,n,a){const o=new URLSearchParams({n:t.toString(),e:s.toString(),s:r.toString(),w:n.toString()});return a&&o.set("search",a),await this.request("GET","v1/trees?"+o.toString())}async loginWithGoogle(t){return console.debug("[api] Logging in with Google"),await this.request("POST","v2/login/google",{body:JSON.stringify({token:t}),headers:{"Content-Type":"application/json"}})}async updateTree(t,s){return await this.request("PUT",`v1/trees/${t}`,{body:JSON.stringify(s),headers:{"Content-Type":"application/json",...this.getAuthHeaders()}})}async addComment(t,s){const r={"Content-Type":"application/json",...this.getAuthHeaders()};return await this.request("POST",`v1/trees/${t}/comments`,{body:JSON.stringify({message:s}),headers:r})}async uploadFile(t,s){const r={"Content-Type":"application/json",...this.getAuthHeaders()},n=await s.arrayBuffer(),a=new Blob([n],{type:s.type});return await this.request("POST",`v1/trees/${t}/files`,{body:a,headers:r})}async searchSpecies(t){const s=new URLSearchParams({query:t});return await this.request("GET",`v1/species/search?${s}`)}async getTreeComments(t){return await this.request("GET",`v1/trees/${t}/comments`)}async request(t,s,r){console.debug(`[api] Requesting ${t} ${this.root}${s}`);const n=new Request(this.root+s,{method:t,...r}),a=await fetch(n),o=a.status==202?void 0:await a.json();return{status:a.status,data:o}}getAuthHeaders(){var t;if(c(T)){const s=(t=c(S))==null?void 0:t.token;if(s)return{Authorization:`Bearer ${s}`}}return{}}}const H=new $;export{H as a,R as b,B as g,U as w};
